/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.Customer;

import Model.Cart;
import Model.Customer;
import Model.Inventory;
import Model.Order;
import Model.OrderItem;
import Model.OrderManager;
import Model.ProductInventoryLoader;
import View.User.LoginView;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ht-19
 */
public class CartView extends javax.swing.JFrame {
    DefaultTableModel model;
    Customer customer;
    Cart cart;
    /**
     * Creates new form CartView
     */
    public CartView() {
        initComponents();
        loadTable();
    }
    
    public CartView(Customer customer, Cart cart){
        this.cart = cart;
        this.customer = customer;
        initComponents();
        loadTable();
    }
    
    public CartView(Customer customer){
        this.customer = customer;
        initComponents();
        loadTable();
    }
    
    private void loadTable(){
        model = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column){
               return false;
            }
        };
        model.addColumn("Product ID");
        model.addColumn("Product");
        model.addColumn("Price Per Unit (RM)");
        model.addColumn("Type");
        model.addColumn("Quantity");
        model.addColumn("Total Price (RM)");
        
        if(cart != null){
            if(cart.getCartItems().isEmpty()){
                JOptionPane.showMessageDialog(this, "The cart is empty.");
                btnRemove.setEnabled(false);
                btnEditQuantity.setEnabled(false);
                btnCheckout.setEnabled(false);     
            }else{
                ArrayList<OrderItem> cartItems = cart.getCartItems();
                double grandTotal = 0;
                for(int i = 0; i < cartItems.size(); i++){
                    String productId = cartItems.get(i).getProduct().getProductId();
                    String productName = cartItems.get(i).getProduct().getProductName();
                    double price = cartItems.get(i).getProduct().getPrice();
                    String type = "";
                    if(cartItems.get(i).getProduct().toString().equals("N")){
                        type = "Non-Fragile";
                    }else if(cartItems.get(i).getProduct().toString().equals("F")){
                        type = "Fragile";
                    }
                    int quantity = cartItems.get(i).getQuantity();
                    double totalPrice = price * quantity;
                    grandTotal += totalPrice;
                    Object[] data = {productId, productName, price, type, quantity, totalPrice};
                    model.addRow(data);
                    
                }
                lblTotalPrice.setText("RM" + Double.toString(grandTotal));

            }
                       
        }else{
            JOptionPane.showMessageDialog(this, "The cart is empty.");
            btnRemove.setEnabled(false);
            btnEditQuantity.setEnabled(false);
            btnCheckout.setEnabled(false);           
        }
        tblCart.setModel(model);
        
    }

    private void refreshTable(){
        if(model.getRowCount() > 0){
            for(int i = model.getRowCount() - 1; i >= 0 ; i--){
                model.removeRow(i);
            }
            loadTable();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnEditQuantity = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnProductCatalog = new javax.swing.JButton();
        btnMainMenu = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblTotalPrice = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCart);

        btnRemove.setText("Remove ");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnEditQuantity.setText("Edit Quantity");
        btnEditQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditQuantityActionPerformed(evt);
            }
        });

        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        lblTitle.setText("Cart");

        btnProductCatalog.setText("Product Catalog");
        btnProductCatalog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductCatalogActionPerformed(evt);
            }
        });

        btnMainMenu.setText("Main Menu");
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Price:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(btnProductCatalog)
                        .addGap(30, 30, 30)
                        .addComponent(btnMainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .addComponent(btnCheckout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTotalPrice))
                            .addComponent(btnEditQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemove)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditQuantity)
                        .addGap(18, 18, 18)
                        .addComponent(btnCheckout)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lblTotalPrice))))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProductCatalog)
                    .addComponent(btnMainMenu))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        int dialogResult = JOptionPane.showConfirmDialog(null, "Do you want to confirm purchase?", "Confirm",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        switch (dialogResult) {
            case JOptionPane.YES_OPTION:
                // Saving code here
                if(customer != null){
                    Order o = new Order(customer, cart.getCartItems());
                    new OrderManager().addOrder(o);
                    cart.clearItems();
                    JOptionPane.showMessageDialog(this, "Purchase successful!");
                    this.dispose();
                    new MenuView(customer, cart).setVisible(true);
                }else{
                    JOptionPane.showMessageDialog(this, "An error occured, please log in again.");
                    this.dispose();
                    new LoginView().setVisible(true);
                }     
                break;
            case JOptionPane.NO_OPTION:
                return;
            case JOptionPane.CLOSED_OPTION:
                return;
            default:
                break;
        }
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnProductCatalogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductCatalogActionPerformed
        // TODO add your handling code here:
        this.dispose();
        if(cart != null){
            ProductCatalogView form = new ProductCatalogView(customer, cart);
            form.setVisible(true);
        }else{
            ProductCatalogView form = new ProductCatalogView(customer);
            form.setVisible(true);
        }
    }//GEN-LAST:event_btnProductCatalogActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        if(tblCart.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "Please select an item to remove!");
            return;                
        }
        
        int rowSelect = tblCart.getSelectedRow();
        String productId = (String)model.getValueAt(rowSelect, 0);
        
        for(int i = 0; i < cart.getCartItems().size(); i++){
            if(cart.getCartItems().get(i).getProduct().getProductId().equals(productId)){
                cart.getCartItems().remove(i);
            }
        }
        refreshTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnEditQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditQuantityActionPerformed
        // TODO add your handling code here:
        if(tblCart.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "Please select an item to edit!");
            return;                
        }
        
        int rowSelect = tblCart.getSelectedRow();
        String productId = (String)model.getValueAt(rowSelect, 0);
        String strQuantity = JOptionPane.showInputDialog(this, "Change quantity to:");
        
        //Load current stock
        ProductInventoryLoader p = new ProductInventoryLoader();
        ArrayList<Inventory> inventoryArrayList = p.load();
        int stock = 0;
        int quantity = 0;
        for(int i = 0; i < inventoryArrayList.size(); i++){
            if(inventoryArrayList.get(i).getProduct().getProductId().equals(productId)){
                stock = inventoryArrayList.get(i).getQuantity();
                break;
            }
        }
        
        //Check quantity is less than stock
        if(strQuantity != null){
            try{          
                quantity= Integer.parseInt(strQuantity);
                if(quantity <= 0){
                    JOptionPane.showMessageDialog(this, "Please enter a valid quantity! (1 or more)");
                    return;
                }else if(quantity > stock){
                    JOptionPane.showMessageDialog(this, "The quantity exceeded available stock!");
                    return;
                }
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Please enter a number!");
                return;
            }
            
            //edit the quantity in the cart arraylist
            for(int i = 0; i < cart.getCartItems().size(); i++){
                if(cart.getCartItems().get(i).getProduct().getProductId().equals(productId)){
                    cart.getCartItems().get(i).setQuantity(quantity);          
                }
            }
            refreshTable();
        }      

       
        
    }//GEN-LAST:event_btnEditQuantityActionPerformed

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        // TODO add your handling code here:
        if(cart == null){
            MenuView form = new MenuView(customer);
            this.dispose();
            form.setVisible(true);
        }else{
            MenuView form = new MenuView(customer, cart);
            this.dispose();
            form.setVisible(true);
        }
    }//GEN-LAST:event_btnMainMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CartView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CartView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CartView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CartView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CartView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnEditQuantity;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnProductCatalog;
    private javax.swing.JButton btnRemove;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JTable tblCart;
    // End of variables declaration//GEN-END:variables
}
